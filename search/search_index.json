{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the FDP on Python 3 \u00b6 This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. The banner of the programme is the following \u00b6 Important link \u00b6 Registration Link WhatsApp Group Query Form","title":"Home"},{"location":"#welcome-to-the-fdp-on-python-3","text":"This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to the FDP on Python 3"},{"location":"#the-banner-of-the-programme-is-the-following","text":"","title":"The banner of the programme is the following"},{"location":"#important-link","text":"Registration Link WhatsApp Group Query Form","title":"Important link"},{"location":"day1/","text":"Day 1 \u00b6 The agenda of today is the following. Day 1 Defining variable Matheamtical Operations Mathematical Expression Importing Libraries Plotting simple function in python Simple Plots Adding Attributes in Plots Saving Plots More Things to Explore References Defining variable \u00b6 To define a varaible just choose a varaible name and asign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float name = \"Sandeep Suman\" # a string Ex: Choose three variables and assign one as an integer, one as a float and one as a string, and print them. For example to print the name variable we use print ( name ) Sandeep Suman Tip The line after # got ignored by the python. It is called a comment in any programming language. You can use comment to add some instructions to the code. Matheamtical Operations \u00b6 Mathematical operations, i.e., addition, substraction etc. can be done as 5 + 6 # addition 5 - 6 # substraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as an integer. Try each of the above operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5 Mathematical Expression \u00b6 We can use these operations to evaluate complicated mathematical expressions in python, for example, we can compute f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13 Importing Libraries \u00b6 To increase the functiionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and the variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only. Plotting simple function in python \u00b6 To plot simple functions in python we use numpy and matplotlib libraries and three important functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will plot list of elements x versus y show from matplotlib.pyplot This function will show the final plot. It is simply invoked by typing show() Simple Plots \u00b6 Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . # 1. import necessary libraries import numpy as np import matplotlib.pyplot as plt # 2. generate a list of points in the given domain x = np . linspace ( - np . pi , np . pi , 100 ) # 3. apply the function on x y = np . sin ( x ) # 4. plot the y versus x plt . plot ( x , y ) # 5. show the plot plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1 Adding Attributes in Plots \u00b6 The graph shows visual information in a small space in the form of an image. The representation can be improved by adding extra infomation like title legends and other things. These are called attributes. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y, color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. plt . xlabel ( 'x values' ) plt . ylabel ( 'y values' ) Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Tip Try to add one attribute at a time. Use plane english in double/single quotes. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\frac{\\sin(x)} {x} $\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour. Saving Plots \u00b6 In order to save the plot in the local directory we use savefig function. The plot can be saved in the following format. pdf ps png svg eps To save the figure in currrent working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' ) More Things to Explore \u00b6 Multiple plots We can plot more than one graphs togather as follows import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b # plot all the graphs together and labels can # be used to identify them plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) # adding attributes to the plot plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () # save and display the graph plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots Subplot is used to plot more than one plots in a bigger plot. References \u00b6 Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"Day 1"},{"location":"day1/#day-1","text":"The agenda of today is the following. Day 1 Defining variable Matheamtical Operations Mathematical Expression Importing Libraries Plotting simple function in python Simple Plots Adding Attributes in Plots Saving Plots More Things to Explore References","title":"Day 1"},{"location":"day1/#defining-variable","text":"To define a varaible just choose a varaible name and asign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float name = \"Sandeep Suman\" # a string Ex: Choose three variables and assign one as an integer, one as a float and one as a string, and print them. For example to print the name variable we use print ( name ) Sandeep Suman Tip The line after # got ignored by the python. It is called a comment in any programming language. You can use comment to add some instructions to the code.","title":"Defining variable"},{"location":"day1/#matheamtical-operations","text":"Mathematical operations, i.e., addition, substraction etc. can be done as 5 + 6 # addition 5 - 6 # substraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as an integer. Try each of the above operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5","title":"Matheamtical Operations"},{"location":"day1/#mathematical-expression","text":"We can use these operations to evaluate complicated mathematical expressions in python, for example, we can compute f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13","title":"Mathematical Expression"},{"location":"day1/#importing-libraries","text":"To increase the functiionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and the variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only.","title":"Importing Libraries"},{"location":"day1/#plotting-simple-function-in-python","text":"To plot simple functions in python we use numpy and matplotlib libraries and three important functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will plot list of elements x versus y show from matplotlib.pyplot This function will show the final plot. It is simply invoked by typing show()","title":"Plotting simple function in python"},{"location":"day1/#simple-plots","text":"Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . # 1. import necessary libraries import numpy as np import matplotlib.pyplot as plt # 2. generate a list of points in the given domain x = np . linspace ( - np . pi , np . pi , 100 ) # 3. apply the function on x y = np . sin ( x ) # 4. plot the y versus x plt . plot ( x , y ) # 5. show the plot plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1","title":"Simple Plots"},{"location":"day1/#adding-attributes-in-plots","text":"The graph shows visual information in a small space in the form of an image. The representation can be improved by adding extra infomation like title legends and other things. These are called attributes. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y, color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. plt . xlabel ( 'x values' ) plt . ylabel ( 'y values' ) Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Tip Try to add one attribute at a time. Use plane english in double/single quotes. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\frac{\\sin(x)} {x} $\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour.","title":"Adding Attributes in Plots"},{"location":"day1/#saving-plots","text":"In order to save the plot in the local directory we use savefig function. The plot can be saved in the following format. pdf ps png svg eps To save the figure in currrent working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' )","title":"Saving Plots"},{"location":"day1/#more-things-to-explore","text":"Multiple plots We can plot more than one graphs togather as follows import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b # plot all the graphs together and labels can # be used to identify them plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) # adding attributes to the plot plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () # save and display the graph plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots Subplot is used to plot more than one plots in a bigger plot.","title":"More Things to Explore"},{"location":"day1/#references","text":"Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"References"},{"location":"day2/","text":"Day 2 \u00b6 Day 2 Loading data from files Single Column File Multi Columns File Plotting data Other type of Plots Scatter plot Bar Graph Pie Chart Refrences Loading data from files \u00b6 To load the data from external text or CSV file we have to use loadtxt function from the numpy library. This function will store the column into the lists in python, which can be further processed in the program. Single Column File \u00b6 A single comma separated row file can be read as the following. Let primes.txt stores the data consist of first 100 prime numbers separated by comma. cat primes.txt 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 To read this data and store all the values in a list named primes we use the following command import numpy as np primes = np . loadtxt ( \"primes.txt\" , delimiter = ',' ) print ( primes ) [ 2. 3. 5. 7. 11. 13. 17. 19. 23. 29. 31. 37. 41. 43. 47. 53. 59. 61. 67. 71. 73. 79. 83. 89. 97. 101. 103. 107. 109. 113. 127. 131. 137. 139. 149. 151. 157. 163. 167. 173. 179. 181. 191. 193. 197. 199. 211. 223. 227. 229. 233. 239. 241. 251. 257. 263. 269. 271. 277. 281. 283. 293. 307. 311. 313. 317. 331. 337. 347. 349. 353. 359. 367. 373. 379. 383. 389. 397. 401. 409. 419. 421. 431. 433. 439. 443. 449. 457. 461. 463. 467. 479. 487. 491. 499. 503. 509. 521. 523. 541.] Warning The loadtxt function get only the data that can be converted into numbers. To get the data in other types we have to pass the type of data as an optional argument. For example age_group = np . loadtxt ( \"fruits.txt\" , dtype = np . str ) Multi Columns File \u00b6 Suppose we want to load a marks.csv that consist of two columns with a header as follows head marks.csv Roll No.,Marks 1 ,21 2 ,30 3 ,22 4 ,21 5 ,20 6 ,23 7 ,23 8 ,22 9 ,22 To read each column as a separate list and skipping the first row, we can use the following, import numpy as np roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) print ( roll_no , marks ) [ 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . 9 . 10 . 11 . 12 . 13 . 14 . 15 . 16 . 17 . 18 . 19 . 20 . 21 . 22 . 23 . 24 . 25 . 26 . 27 . 28 . 29 . 30 . 31 . 32 . 33 . 34 . 35 . 36 . 37 . 38 . 39 . 40 . 41 . 42 . 43 . 44 . 45 . 46 . 47 . 48 . 49 . 50 . 51 . 52 . 53 . 54 . 55 . 56 . 57 . 58 . 59 . 60 . 61 . 62 . 63 . 64 . 65 . 66 . 67 . 68 . 69 . 70 . 71 . 72 . 73 . 74 . 75 . 76 . 77 . 78 . 79 . 80 . 81 . ] [ 21 . 30 . 22 . 21 . 20 . 23 . 23 . 22 . 22 . 25 . 21 . 23 . 21 . 23 . 24 . 22 . 21 . 23 . 23 . 21 . 28 . 30 . 29 . 27 . 25 . 23 . 25 . 23 . 29 . 22 . 21 . 26 . 30 . 22 . 22 . 20 . 23 . 23 . 23 . 30 . 21 . 22 . 30 . 28 . 28 . 24 . 21 . 24 . 25 . 23 . 24 . 24 . 26 . 23 . 25 . 24 . 28 . 23 . 25 . 20 . 22 . 29 . 26 . 25 . 24 . 24 . 30 . 30 . 24 . 25 . 29 . 28 . 30 . 25 . 27 . 30 . 24 . 30 . 28 . 24 . 30 . ] Tip To skip any number of rows from the top we pass the skiprows as an optional arguments. For example to skip top two rows of the data we can use roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 2 , unpack = True ) Plotting data \u00b6 Now we have imported the data from files as lists in python. Now we can plot using plot command, for example, the data from above files can be plotted using the following code import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . plot ( roll_no , marks ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () Tip We can also apply some functions on any list and then plot them. Other type of Plots \u00b6 The default plot join all the points to make a plot which is not relevant all the time. For example joining all the points in the above graph doesn't make it relavant. Here we will see the examples of more types of plot in python. Scatter plot \u00b6 In a scatter plot the data is displayed as a collection of points, each point determines the position on x and y axes. To make a scatter plot scatter function is used from the matplotlib.pyplot library. import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . scatter ( roll_no , marks , color = 'red' ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () Bar Graph \u00b6 A bar graph is in the python is plotted using the bar function in matplotlib.pyplot library. A simple example of bar graph is the following import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . bar ( langs , students ) plt . xlabel ( \"Programming Language\" ) plt . ylabel ( \"Number of Students\" ) plt . title ( \"Number of Students in each Programming Language\" ) plt . show () A data on csv contains the number of COVID-19 cases according to age groups. Each age groups consist of 10 years. The head of the data looks like this Sno,AgeGroup,TotalCases,Percentage 1 ,0-9,22,3.18% 2 ,10-19,27,3.90% 3 ,20-29,172,24.86% 4 ,30-39,146,21.10% 5 ,40-49,112,16.18% 6 ,50-59,77,11.13% 7 ,60-69,89,12.86% 8 ,70-79,28,4.05% 9 ,> = 80 ,10,1.45% We can use 1 st and 3 rd column of the data to plot the following bar graph. import numpy as np import matplotlib.pyplot as plt # getting the data in lists age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) # plotting the bar graph plt . bar ( age_group , positive , color = 'red' ) # adding attributes to the graph plt . xlabel ( \"Age Group\" ) plt . ylabel ( \"Positive CoVid-19 Cases\" ) plt . title ( \"COVID cases in each Age Group\" ) # showing the graph plt . show () Pie Chart \u00b6 A pie chart is a circular chart divided into sectors,to illustrate numerical proportion. Pie chart is plotted using pie function from matplotlib.pyplot library. A simple pie chart can be plotted as import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . pie ( students , labels = langs ) plt . show () The COVID-19 example can also be represented in pie chart using the following code. import numpy as np import matplotlib.pyplot as plt age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) plt . pie ( positive , labels = age_group ) plt . title ( \"COVID cases in each Age Group\" ) plt . show () Refrences \u00b6 Official Docs on Loadtxt Matplotlib Documentation Gallery Matplotlib","title":"Day 2"},{"location":"day2/#day-2","text":"Day 2 Loading data from files Single Column File Multi Columns File Plotting data Other type of Plots Scatter plot Bar Graph Pie Chart Refrences","title":"Day 2"},{"location":"day2/#loading-data-from-files","text":"To load the data from external text or CSV file we have to use loadtxt function from the numpy library. This function will store the column into the lists in python, which can be further processed in the program.","title":"Loading data from files"},{"location":"day2/#single-column-file","text":"A single comma separated row file can be read as the following. Let primes.txt stores the data consist of first 100 prime numbers separated by comma. cat primes.txt 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 To read this data and store all the values in a list named primes we use the following command import numpy as np primes = np . loadtxt ( \"primes.txt\" , delimiter = ',' ) print ( primes ) [ 2. 3. 5. 7. 11. 13. 17. 19. 23. 29. 31. 37. 41. 43. 47. 53. 59. 61. 67. 71. 73. 79. 83. 89. 97. 101. 103. 107. 109. 113. 127. 131. 137. 139. 149. 151. 157. 163. 167. 173. 179. 181. 191. 193. 197. 199. 211. 223. 227. 229. 233. 239. 241. 251. 257. 263. 269. 271. 277. 281. 283. 293. 307. 311. 313. 317. 331. 337. 347. 349. 353. 359. 367. 373. 379. 383. 389. 397. 401. 409. 419. 421. 431. 433. 439. 443. 449. 457. 461. 463. 467. 479. 487. 491. 499. 503. 509. 521. 523. 541.] Warning The loadtxt function get only the data that can be converted into numbers. To get the data in other types we have to pass the type of data as an optional argument. For example age_group = np . loadtxt ( \"fruits.txt\" , dtype = np . str )","title":"Single Column File"},{"location":"day2/#multi-columns-file","text":"Suppose we want to load a marks.csv that consist of two columns with a header as follows head marks.csv Roll No.,Marks 1 ,21 2 ,30 3 ,22 4 ,21 5 ,20 6 ,23 7 ,23 8 ,22 9 ,22 To read each column as a separate list and skipping the first row, we can use the following, import numpy as np roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) print ( roll_no , marks ) [ 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . 9 . 10 . 11 . 12 . 13 . 14 . 15 . 16 . 17 . 18 . 19 . 20 . 21 . 22 . 23 . 24 . 25 . 26 . 27 . 28 . 29 . 30 . 31 . 32 . 33 . 34 . 35 . 36 . 37 . 38 . 39 . 40 . 41 . 42 . 43 . 44 . 45 . 46 . 47 . 48 . 49 . 50 . 51 . 52 . 53 . 54 . 55 . 56 . 57 . 58 . 59 . 60 . 61 . 62 . 63 . 64 . 65 . 66 . 67 . 68 . 69 . 70 . 71 . 72 . 73 . 74 . 75 . 76 . 77 . 78 . 79 . 80 . 81 . ] [ 21 . 30 . 22 . 21 . 20 . 23 . 23 . 22 . 22 . 25 . 21 . 23 . 21 . 23 . 24 . 22 . 21 . 23 . 23 . 21 . 28 . 30 . 29 . 27 . 25 . 23 . 25 . 23 . 29 . 22 . 21 . 26 . 30 . 22 . 22 . 20 . 23 . 23 . 23 . 30 . 21 . 22 . 30 . 28 . 28 . 24 . 21 . 24 . 25 . 23 . 24 . 24 . 26 . 23 . 25 . 24 . 28 . 23 . 25 . 20 . 22 . 29 . 26 . 25 . 24 . 24 . 30 . 30 . 24 . 25 . 29 . 28 . 30 . 25 . 27 . 30 . 24 . 30 . 28 . 24 . 30 . ] Tip To skip any number of rows from the top we pass the skiprows as an optional arguments. For example to skip top two rows of the data we can use roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 2 , unpack = True )","title":"Multi Columns File"},{"location":"day2/#plotting-data","text":"Now we have imported the data from files as lists in python. Now we can plot using plot command, for example, the data from above files can be plotted using the following code import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . plot ( roll_no , marks ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () Tip We can also apply some functions on any list and then plot them.","title":"Plotting data"},{"location":"day2/#other-type-of-plots","text":"The default plot join all the points to make a plot which is not relevant all the time. For example joining all the points in the above graph doesn't make it relavant. Here we will see the examples of more types of plot in python.","title":"Other type of Plots"},{"location":"day2/#scatter-plot","text":"In a scatter plot the data is displayed as a collection of points, each point determines the position on x and y axes. To make a scatter plot scatter function is used from the matplotlib.pyplot library. import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . scatter ( roll_no , marks , color = 'red' ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show ()","title":"Scatter plot"},{"location":"day2/#bar-graph","text":"A bar graph is in the python is plotted using the bar function in matplotlib.pyplot library. A simple example of bar graph is the following import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . bar ( langs , students ) plt . xlabel ( \"Programming Language\" ) plt . ylabel ( \"Number of Students\" ) plt . title ( \"Number of Students in each Programming Language\" ) plt . show () A data on csv contains the number of COVID-19 cases according to age groups. Each age groups consist of 10 years. The head of the data looks like this Sno,AgeGroup,TotalCases,Percentage 1 ,0-9,22,3.18% 2 ,10-19,27,3.90% 3 ,20-29,172,24.86% 4 ,30-39,146,21.10% 5 ,40-49,112,16.18% 6 ,50-59,77,11.13% 7 ,60-69,89,12.86% 8 ,70-79,28,4.05% 9 ,> = 80 ,10,1.45% We can use 1 st and 3 rd column of the data to plot the following bar graph. import numpy as np import matplotlib.pyplot as plt # getting the data in lists age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) # plotting the bar graph plt . bar ( age_group , positive , color = 'red' ) # adding attributes to the graph plt . xlabel ( \"Age Group\" ) plt . ylabel ( \"Positive CoVid-19 Cases\" ) plt . title ( \"COVID cases in each Age Group\" ) # showing the graph plt . show ()","title":"Bar Graph"},{"location":"day2/#pie-chart","text":"A pie chart is a circular chart divided into sectors,to illustrate numerical proportion. Pie chart is plotted using pie function from matplotlib.pyplot library. A simple pie chart can be plotted as import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . pie ( students , labels = langs ) plt . show () The COVID-19 example can also be represented in pie chart using the following code. import numpy as np import matplotlib.pyplot as plt age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) plt . pie ( positive , labels = age_group ) plt . title ( \"COVID cases in each Age Group\" ) plt . show ()","title":"Pie Chart"},{"location":"day2/#refrences","text":"Official Docs on Loadtxt Matplotlib Documentation Gallery Matplotlib","title":"Refrences"},{"location":"exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems) Internal Exam \u00b6 To download the question of last internal exam click here . Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exams"},{"location":"exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems)","title":"Exams"},{"location":"exam/#internal-exam","text":"To download the question of last internal exam click here .","title":"Internal Exam"},{"location":"exam/#final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Final Exam"},{"location":"matrix-linear-transformation/","text":"Gaussian Elimination \u00b6 The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Gaussian Elimination"},{"location":"matrix-linear-transformation/#gaussian-elimination","text":"The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Gaussian Elimination"},{"location":"quickstart-python/","text":"Quick Start Python 3 \u00b6 Quick Start Python 3 Installation Android Smartphone Computers/Laptops Python is a programming language so before learning anything we have to setup the enviroment so we can practice the programs. Plese install pyton 3 as given below. Installation \u00b6 Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone. Android Smartphone \u00b6 Plese the Pydroid 3 IDE(Integrated development enviroment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow buttion on the right bottom, you will see hello world! is printed on a terminal. The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. Pydroid 3 Repo Computers/Laptops \u00b6 Plese install anaconda python 3.x from the bottom of the following page according to your platform. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"Quick Start"},{"location":"quickstart-python/#quick-start-python-3","text":"Quick Start Python 3 Installation Android Smartphone Computers/Laptops Python is a programming language so before learning anything we have to setup the enviroment so we can practice the programs. Plese install pyton 3 as given below.","title":"Quick Start Python 3"},{"location":"quickstart-python/#installation","text":"Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone.","title":"Installation"},{"location":"quickstart-python/#android-smartphone","text":"Plese the Pydroid 3 IDE(Integrated development enviroment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow buttion on the right bottom, you will see hello world! is printed on a terminal. The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. Pydroid 3 Repo","title":"Android Smartphone"},{"location":"quickstart-python/#computerslaptops","text":"Plese install anaconda python 3.x from the bottom of the following page according to your platform. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"Computers/Laptops"}]}