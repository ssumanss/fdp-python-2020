{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the FDP on Python 3 \u00b6 This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. The banner of the programme is the following \u00b6","title":"Home"},{"location":"#welcome-to-the-fdp-on-python-3","text":"This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to the FDP on Python 3"},{"location":"#the-banner-of-the-programme-is-the-following","text":"","title":"The banner of the programme is the following"},{"location":"day1/","text":"Day 1 \u00b6 The agenda of today is the following. Day 1 Defining variable Matheamtical Operations Mathematical Expression Importing Libraries Plotting simple function in python Simple Plots Adding Attributes in Plots Saving Plots More Things to Explore References Defining variable \u00b6 To define a varaible just choose a varaible name and asign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float name = \"Sandeep Suman\" # a string Ex: Choose three variable and assign each one as an integer, a float and a string, and print them. For example to print the name variable we use print ( name ) Sandeep Suman Matheamtical Operations \u00b6 Mathematical operations, i.e., addition, substraction etc. can be defined as 5 + 6 # addition 5 - 6 # substraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as integer. Try each of the following operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5 Mathematical Expression \u00b6 We can use these operations to 4 complicated mathematical expressions in python, for example, we can evaluate f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13 Importing Libraries \u00b6 To increase the functiionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only. Plotting simple function in python \u00b6 To plot simple functions in python we use numpy and matplotlib libraries and three functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will list of elements x versus y show from matplotlib.pyplot This functin will show the final plot. It is simply invoked by typin show() Simple Plots \u00b6 Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - np . pi , np . pi , 100 ) y = np . sin ( x ) plt . plot ( x , y ) plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1 Adding Attributes in Plots \u00b6 The graph shows visual information in a small space in the form of an image. The representation can be improved by adding app tributes like title legends and other things. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y,color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. python plt.xlabel('x values') plt.ylabel('y values') Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\tan(x^2)$\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour. Saving Plots \u00b6 In order to save plots in the local directory we use savefig function. The plot can be save in the following format. pdf ps png svg eps To save the figure in currrent working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' ) More Things to Explore \u00b6 Multiple plots import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots References \u00b6 Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"Day 1"},{"location":"day1/#day-1","text":"The agenda of today is the following. Day 1 Defining variable Matheamtical Operations Mathematical Expression Importing Libraries Plotting simple function in python Simple Plots Adding Attributes in Plots Saving Plots More Things to Explore References","title":"Day 1"},{"location":"day1/#defining-variable","text":"To define a varaible just choose a varaible name and asign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float name = \"Sandeep Suman\" # a string Ex: Choose three variable and assign each one as an integer, a float and a string, and print them. For example to print the name variable we use print ( name ) Sandeep Suman","title":"Defining variable"},{"location":"day1/#matheamtical-operations","text":"Mathematical operations, i.e., addition, substraction etc. can be defined as 5 + 6 # addition 5 - 6 # substraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as integer. Try each of the following operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5","title":"Matheamtical Operations"},{"location":"day1/#mathematical-expression","text":"We can use these operations to 4 complicated mathematical expressions in python, for example, we can evaluate f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13","title":"Mathematical Expression"},{"location":"day1/#importing-libraries","text":"To increase the functiionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only.","title":"Importing Libraries"},{"location":"day1/#plotting-simple-function-in-python","text":"To plot simple functions in python we use numpy and matplotlib libraries and three functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will list of elements x versus y show from matplotlib.pyplot This functin will show the final plot. It is simply invoked by typin show()","title":"Plotting simple function in python"},{"location":"day1/#simple-plots","text":"Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - np . pi , np . pi , 100 ) y = np . sin ( x ) plt . plot ( x , y ) plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1","title":"Simple Plots"},{"location":"day1/#adding-attributes-in-plots","text":"The graph shows visual information in a small space in the form of an image. The representation can be improved by adding app tributes like title legends and other things. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y,color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. python plt.xlabel('x values') plt.ylabel('y values') Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\tan(x^2)$\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour.","title":"Adding Attributes in Plots"},{"location":"day1/#saving-plots","text":"In order to save plots in the local directory we use savefig function. The plot can be save in the following format. pdf ps png svg eps To save the figure in currrent working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' )","title":"Saving Plots"},{"location":"day1/#more-things-to-explore","text":"Multiple plots import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots","title":"More Things to Explore"},{"location":"day1/#references","text":"Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"References"},{"location":"exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems) Internal Exam \u00b6 To download the question of last internal exam click here . Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exams"},{"location":"exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems)","title":"Exams"},{"location":"exam/#internal-exam","text":"To download the question of last internal exam click here .","title":"Internal Exam"},{"location":"exam/#final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Final Exam"},{"location":"matrix-linear-transformation/","text":"Gaussian Elimination \u00b6 The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Gaussian Elimination"},{"location":"matrix-linear-transformation/#gaussian-elimination","text":"The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Gaussian Elimination"},{"location":"quickstart-python/","text":"Quick Start Python 3 \u00b6 Quick Start Python 3 Installation Android Smartphone Computers/Laptops Python is a programming language so before learning anything we have to setup the enviroment so we can practice the programs. Plese install pyton 3 as given below. Installation \u00b6 Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone. Android Smartphone \u00b6 Plese the Pydroid 3 IDE(Integrated development enviroment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow buttion on the right bottom, you will see hello world! is printed on a terminal. The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. Pydroid 3 Repo Computers/Laptops \u00b6 Plese install anaconda python from the bottom of the following page according to your platform. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"Quick Start"},{"location":"quickstart-python/#quick-start-python-3","text":"Quick Start Python 3 Installation Android Smartphone Computers/Laptops Python is a programming language so before learning anything we have to setup the enviroment so we can practice the programs. Plese install pyton 3 as given below.","title":"Quick Start Python 3"},{"location":"quickstart-python/#installation","text":"Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone.","title":"Installation"},{"location":"quickstart-python/#android-smartphone","text":"Plese the Pydroid 3 IDE(Integrated development enviroment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow buttion on the right bottom, you will see hello world! is printed on a terminal. The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. Pydroid 3 Repo","title":"Android Smartphone"},{"location":"quickstart-python/#computerslaptops","text":"Plese install anaconda python from the bottom of the following page according to your platform. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"Computers/Laptops"}]}